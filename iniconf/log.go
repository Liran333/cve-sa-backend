package iniconf

import (
	"fmt"
	"github.com/sirupsen/logrus"
	"os"
	"time"
)

var Logs *logrus.Logger
var LogFile *os.File

func InitLog() error {
	logConf, err := Cfg.GetSection("log")
	if err != nil {
		fmt.Println("Fail to load section 'server': ", err)
		return err
	}
	logLevel := logConf.Key("LOG_LEVEL").MustUint(5)
	Logs = logrus.New()
	lLog := logrus.TraceLevel
	if logLevel == 5 {
		lLog = logrus.DebugLevel
	} else if logLevel == 4 {
		lLog = logrus.InfoLevel
	} else if logLevel == 3 {
		lLog = logrus.WarnLevel
	} else if logLevel == 2 {
		lLog = logrus.ErrorLevel
	} else if logLevel == 1 {
		lLog = logrus.FatalLevel
	} else if logLevel == 0 {
		lLog = logrus.PanicLevel
	}
	Logs.SetLevel(lLog)
	Logs.Formatter = &logrus.TextFormatter{
		DisableColors:  true,
		FullTimestamp:  true,
		DisableSorting: true,
		ForceColors:    true,
		ForceQuote:     true,
	}

	loggerName := logConf.Key("LOG_NAME").MustString("sa-backend")
	curTime := time.Now()
	logFileName := fmt.Sprintf("%s_%04d-%02d-%02d.log",
		loggerName, curTime.Year(), curTime.Month(), curTime.Day())
	LogFile, err = os.OpenFile(logFileName, os.O_CREATE|os.O_APPEND|os.O_WRONLY, os.ModeExclusive)
	if err != nil {
		fmt.Printf("try create logfile[%s] error[%s]\n", logFileName, err.Error())
		return err
	}
	Logs.SetOutput(LogFile)
	return nil
}
