package dao

import (
	"cve-sa-backend/iniconf"
	"cve-sa-backend/models"
	cveSa "cve-sa-backend/utils/entity/cve_sa"
)

func GetOsList(lang string) (data []string, err error) {
	if err = iniconf.DB.
		Model(&models.OeCompatibilityDriver{}).
		Select("distinct(os) as os").
		Where("lang = ?", lang).
		Order("os asc").
		Pluck("os", &data).Error; err != nil {
		return nil, err
	}
	return
}

func GetArchitectureList(lang string) (data []string, err error) {
	if err = iniconf.DB.
		Model(&models.OeCompatibilityDriver{}).
		Select("distinct(architecture) as architecture").
		Where("lang = ?", lang).
		Order("architecture asc").
		Pluck("architecture", &data).Error; err != nil {
		return nil, err
	}
	return
}

func FindAllDriver(req cveSa.OeCompSearchRequest) (datas []models.OeCompatibilityDriver, total int64, err error) {
	q := iniconf.DB
	query := q.Model(&models.OeCompatibilityDriver{})
	page, size := getPage(req.Pages)
	if req.Os != "" {
		query = query.Where("os = ?", req.Os)
	}

	if req.Architecture != "" {
		query = query.Where("architecture = ?", req.Architecture)
	}

	if req.Lang != "" {
		query = query.Where("lang = ?", req.Lang)
	}

	if req.KeyWord != "" {
		query = query.Where(
			q.Where("driver_name like ?", "%"+req.KeyWord+"%").
				Or("board_model like ?", "%"+req.KeyWord+"%"),
		)
	}
	if err = query.Count(&total).Error; err != nil {
		iniconf.SLog.Error(err)
		return
	}
	if total == 0 {
		return
	}
	query = query.Order("architecture desc").Limit(size).Offset((page - 1) * size)
	if err = query.Find(&datas).Error; err != nil {
		iniconf.SLog.Error(err)
		return
	}
	return
}
