package dao

import (
	"errors"

	"cve-sa-backend/iniconf"
	"cve-sa-backend/models"
	cveSa "cve-sa-backend/utils/entity/cve_sa"

	"gorm.io/gorm"
)

var column = []string{"id", "summary", "cve_id", "affected_product", "announcement_time", "affected_component", "security_notice_no", "update_time"}

const (
	Page = 1
	Size = 10
)

func SecurityFindAll(req cveSa.RequestData) (datas []models.CveSecurityNotice, total int64, err error) {
	q := iniconf.DB
	page, size := getPage(req)
	query := q.Model(&models.CveSecurityNotice{})
	if req.KeyWord != "" {
		query = query.Where(
			q.Where("security_notice_no like ?", "%"+req.KeyWord+"%").
				Or("summary like ?", "%"+req.KeyWord+"%").
				Or("cve_id like ?", "%"+req.KeyWord+"%").
				Or("description like ?", "%"+req.KeyWord+"%"),
		)
	}
	if req.Type != "" {
		query = query.Where("type = ?", req.Type)
	}

	if req.Year != "" {
		query.Where("announcement_time like ?", req.Year+"%")
	}
	if err = query.Count(&total).Error; err != nil {
		iniconf.SLog.Error(err)
		return
	}
	if total == 0 {
		return
	}
	query = query.Select(column).Order("announcement_time desc,security_notice_no desc").Limit(size).Offset((page - 1) * size)
	if err = query.Find(&datas).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			err = nil
			return
		}
		iniconf.SLog.Error(err)
		return
	}
	return
}

func NoticeByCveId(cveId string) (datas []models.CveSecurityNotice, err error) {
	if err = iniconf.DB.
		Model(&models.CveSecurityNotice{}).
		Where("cve_id like ?", "%"+cveId+"%").
		Find(&datas).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			err = nil
			return
		}
		return nil, err
	}
	return
}

func NoticeByCveIdComponent(cveId, affectedComponent string) (datas []models.CveSecurityNotice, err error) {
	if err = iniconf.DB.
		Model(&models.CveSecurityNotice{}).
		Where("cve_id like ?", "%"+cveId+"%").
		Where("affected_component = ?", affectedComponent).
		Find(&datas).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			err = nil
			return
		}
		return nil, err
	}
	return
}

func getPage(req cveSa.RequestData) (int, int) {
	var page, size int
	if req.Pages.Page == 0 {
		page = Page
	} else {
		page = req.Pages.Page
	}
	if req.Pages.Size == 0 {
		size = Size
	} else {
		size = req.Pages.Size
	}
	return page, size
}
