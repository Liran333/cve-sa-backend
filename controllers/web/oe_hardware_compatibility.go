package controllers

import (
	"encoding/xml"

	"cve-sa-backend/dao"
	"cve-sa-backend/handles/web"
	"cve-sa-backend/iniconf"
	"cve-sa-backend/utils"
	cveSa "cve-sa-backend/utils/entity/cve_sa"
	"cve-sa-backend/utils/tools"

	"github.com/gin-gonic/gin"
	"github.com/gin-gonic/gin/binding"
)

func GetOsListForHardware(c *gin.Context) {
	lang := c.DefaultQuery("lang", "zh")

	data, err := dao.GetOsForHardware(lang)
	if err != nil {
		iniconf.SLog.Error(err)
		tools.Failure(c)
		return
	}

	tools.Success(c, data)
}

func GetArchitectureListForHardware(c *gin.Context) {
	lang := c.DefaultQuery("lang", "zh")

	data, err := dao.GetArchitectureListForHardware(lang)
	if err != nil {
		iniconf.SLog.Error(err)
		tools.Failure(c)
		return
	}

	tools.Success(c, data)
}

func FindAllHardwareCompatibility(c *gin.Context) {
	var req cveSa.OeCompSearchRequest

	if err := c.ShouldBindWith(&req, binding.JSON); err != nil {
		iniconf.SLog.Error(err)
		tools.QueryFailure(c)
		return
	}

	datas, err := web.FindAllHardwareCompatibility(req)
	if err != nil {
		iniconf.SLog.Error(err)
		tools.Failure(c)
		return
	}

	tools.Success(c, datas)
}

func GetHardwareCompatibilityById(c *gin.Context) {
	var Id struct {
		Id int64 `form:"id"`
	}

	if err := c.ShouldBindWith(&Id, binding.Query); err != nil {
		iniconf.SLog.Error(err)
		tools.QueryFailure(c)
		return
	}

	data, err := web.GetHardwareCompatibilityById(Id.Id)
	if err != nil {
		iniconf.SLog.Error(err)
		tools.Failure(c)
		return
	}

	tools.Success(c, data)
}

func GetOeHardwareAdapterListByHardwareId(c *gin.Context) {
	var Id struct {
		Id int64 `form:"hardwareId"`
	}

	if err := c.ShouldBindWith(&Id, binding.Query); err != nil {
		iniconf.SLog.Error(err)
		tools.QueryFailure(c)
		return
	}

	datas, err := dao.ByhardwareId(Id.Id)
	if err != nil {
		iniconf.SLog.Error(err)
		tools.Failure(c)
		return
	}

	tools.Success(c, datas)
}

func GetCpu(c *gin.Context) {
	//lang := c.DefaultQuery("lang", "zh")
	//
	//datas, err := dao.GetCpuList(lang)
	//if err != nil {
	//	iniconf.SLog.Error(err)
	//	tools.Failure(c)
	//	return
	//}
	//
	//tools.Success(c, datas)

	s, _ := utils.GetCvrfFile("2022/cvrf-openEuler-SA-2022-1542.xml")
	var data utils.FixedCveXml
	xml.Unmarshal(s, &data)
	tools.Success(c, data)
}
